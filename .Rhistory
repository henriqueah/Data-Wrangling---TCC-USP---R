# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by(ORGAO_ORCAMENTARIO) %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
print(result)
# Captura o tempo de término
end_time <- Sys.time()
# Calcular o tempo decorrido e imprimir
elapsed_time <- end_time - start_time
print(paste("O código levou", elapsed_time, "segundos para executar"))
# Captura o tempo de início
start_time <- Sys.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by(ORGAO_ORCAMENTARIO) %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
result <- f_receita_orc_md %>%
group_by(ORGAO_ORCAMENTARIO) %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
df_receita_orcamento_md <- read_csv("Receitas_Un.Orcam_MD_AnexoI.csv")
df_receita_orcamento_md %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Captura o tempo de início
start_time <- Sys.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by(ORGAO_ORCAMENTARIO) %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Captura o tempo de início
start_time <- Sys.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by(ORGAO_ORCAMENTARIO) %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
start_time <- Sys.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
print(result)
# Captura o tempo de término
end_time <- Sys.time()
# Calcular o tempo decorrido e imprimir
elapsed_time <- end_time - start_time
print(paste("O código levou", elapsed_time, "segundos para executar"))
start_time <- Sys.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
print(result)
# Captura o tempo de término
end_time <- Sys.time()
# Calcular o tempo decorrido e imprimir
elapsed_time <- end_time - start_time
print(paste("O código levou", elapsed_time, "segundos para executar"))
start_time <- Sys.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
print(result)
# Captura o tempo de término
end_time <- Sys.time()
# Calcular o tempo decorrido e imprimir
print(end_time)
print(paste("O código levou", elapsed_time, "segundos para executar"))
start_time <- Sys.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
print(result)
# Captura o tempo de término
end_time <- Sys.time()
# Calcular o tempo decorrido e imprimir
print(end_time)
elapsed_time <- end_time - start_time
print(paste("O código levou", elapsed_time, "segundos para executar"))
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
print(result)
# Captura o tempo de término
end_time <- Sys.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
print(paste("O código levou", elapsed_time, "segundos para executar"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
ent_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR, na.rm = TRUE))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
library(dplyr)
total_functions_dplyr = ls("package:dplyr")
print(length(total_functions_dplyr))
library(devtools)
load_all("tidyverse")
library(tidyverse)
load_all("tidyverse")
functions <- find_functions(path = ".")
library(devtools)
# Lista de alguns pacotes principais do Tidyverse
tidyverse_packages <- c("ggplot2", "dplyr", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats")
# Função para contar o número de funções exportadas por pacote
count_package_functions <- function(package) {
ns <- asNamespace(package)
funcs <- ls(ns, pattern = NULL, all.names = TRUE)
exported_funcs <- funcs[unlist(lsf_str(ns))]
return(length(exported_funcs))
}
# Aplicar a função a cada pacote e somar o total
total_functions <- sum(sapply(tidyverse_packages, count_package_functions))
library(devtools)
tidyverse_packages <- c("ggplot2", "dplyr", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats")
count_package_functions <- function(package) {
ns <- asNamespace(package)
funcs <- ls(ns, pattern = NULL, all.names = TRUE)
exported_funcs <- funcs[unlist(lsf_str(ns))]
return(length(exported_funcs))
}
total_functions <- sum(sapply(tidyverse_packages, count_package_functions))
total_functions <- sum(sapply(tidyverse_packages, count_package_functions))
library(devtools)
library(devtools)
# Lista de alguns pacotes principais do Tidyverse
tidyverse_packages <- c("ggplot2", "dplyr", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats")
# Função para contar o número de funções exportadas por pacote
count_package_functions <- function(package) {
ns <- getNamespaceExports(package)
return(length(ns))
}
# Aplicar a função a cada pacote e somar o total
total_functions <- sum(sapply(tidyverse_packages, count_package_functions))
print(total_functions)
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
library(dplyr)
total_functions_dplyr = ls("package:dplyr")
print(length(total_functions_dplyr))
# Certifique-se de que o devtools e os pacotes do Tidyverse estejam instalados
# install.packages("devtools")
# install.packages("tidyverse")
library(devtools)
# Lista de alguns pacotes principais do Tidyverse
tidyverse_packages <- c("ggplot2", "dplyr", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats")
# Função para contar o número de funções exportadas por pacote
count_package_functions <- function(package) {
ns <- getNamespaceExports(package)
return(length(ns))
}
# Aplicar a função a cada pacote e somar o total
total_functions <- sum(sapply(tidyverse_packages, count_package_functions))
print(total_functions)
library(tidyverse)
library(data.table)
library(kableExtra)
library(stringr)
library(dplyr)
library(readxl)
path_file <- 'LOA_PPA_PLOA_detalhada.xlsx'
dataset_inicial <- read_excel(path_file)
abas_arquivo <- excel_sheets(path_file)
#cada aba do arquivo transformada em arquivo .csv para melhor análise
for (aba in abas_arquivo) {
nome_arquivo_csv <- paste0(aba, ".csv")
dados_aba <- read_excel(path_file, sheet = aba)
write.csv(dados_aba, file = nome_arquivo_csv, row.names = FALSE)
df_receita_orcamento_md <- read_csv("Receitas_Un.Orcam_MD_AnexoI.csv")
df_receita_orcamento_md %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
library(devtools)
# Captura o tempo de início
#start_time <- Sys.time()
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Mostrar o resultado
#print(result)
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
#print(paste("Tempo de execução: ", elapsed_time["elapsed"], "segundos"))
# Captura o tempo de início
#start_time <- Sys.time()
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
total_functions_dplyr = ls("package:dplyr")
library(tidyverse)
library(data.table)
library(kableExtra)
library(stringr)
library(dplyr)
library(readxl)
library(devtools)
library(tidyverse)
library(data.table)
library(kableExtra)
library(stringr)
library(dplyr)
library(readxl)
library(devtools)
path_file <- 'LOA_PPA_PLOA_detalhada.xlsx'
dataset_inicial <- read_excel(path_file)
abas_arquivo <- excel_sheets(path_file)
#cada aba do arquivo transformada em arquivo .csv para melhor análise
for (aba in abas_arquivo) {
nome_arquivo_csv <- paste0(aba, ".csv")
dados_aba <- read_excel(path_file, sheet = aba)
write.csv(dados_aba, file = nome_arquivo_csv, row.names = FALSE)
}
df_receita_orcamento_md <- read_csv("Receitas_Un.Orcam_MD_AnexoI.csv")
df_receita_orcamento_md %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Captura o tempo de início
#start_time <- Sys.time()
start_time <- proc.time()
# Carregar os dados e realizar as operações de agrupamento e soma
f_receita_orc_md <- read_csv('Receitas_Un.Orcam_MD_AnexoI.csv')
result <- f_receita_orc_md %>%
group_by('ORGAO_ORCAMENTARIO') %>%
summarise(TOTAL_VALOR = sum(VALOR))
# Captura o tempo de término
#end_time <- Sys.time()
end_time <- proc.time()
# Calcular o tempo decorrido e imprimir
#print(end_time)
elapsed_time <- end_time - start_time
#print(paste("O código levou", elapsed_time, "segundos para executar"))
print(paste("Tempo de execução: ", elapsed_time["elapsed"] * 1000, "milissegundos"))
total_functions_dplyr = ls("package:dplyr")
print(length(total_functions_dplyr))
# Lista de alguns pacotes principais do Tidyverse
tidyverse_packages <- c("ggplot2", "dplyr", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats")
# Função para contar o número de funções exportadas por pacote
count_package_functions <- function(package) {
ns <- getNamespaceExports(package)
return(length(ns))
}
# Aplica a função a cada pacote e soma o total
total_functions <- sum(sapply(tidyverse_packages, count_package_functions))
print(total_functions)
